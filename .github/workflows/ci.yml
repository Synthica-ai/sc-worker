name: Build Master

on:
  push:
    tags:
      - "*master*"
jobs:
  setup_runner:
    name: Setup Runner
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - name: Start Instance
        run: ./scripts/start_vm.sh
        env:
          TOKEN: ${{ secrets.COREWEAVE_TOKEN }}
          NAMESPACE: ${{ secrets.COREWEAVE_NAMESPACE }}

  build_and_publish_worker:
    name: Build and Publish Worker
    runs-on: ubuntu-latest
    needs: setup_runner
    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@master
        with:
          ref: main

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      - name: Prune Docker
        if: success()
        shell: bash
        run: docker system prune -f

      - name: Build & Tag
        if: success()
        shell: bash
        run: docker build -t stablecog/sc-worker:latest .

      - name: Login to Docker Hub
        if: success()
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push to Docker Hub
        if: success()
        shell: bash
        run: docker push stablecog/sc-worker:latest
      
      - name: Login to GHCR
        if: success()
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GITHUB_TOKEN }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GHCR
        if: success()
        shell: bash
        run: docker tag stablecog/sc-worker:latest ghcr.io/stablecog/sc-worker:latest; docker push ghcr.io/stablecog/sc-worker:latest
        
  destroy_runner:
    name: Stop instance
    runs-on: ubuntu-latest
    if: always()
    needs: build_and_publish_worker

    steps:
      - uses: actions/checkout@master

      - name: Stop VM
        run: ./scripts/stop_vm.sh
        env:
          TOKEN: ${{ secrets.COREWEAVE_TOKEN }}
          NAMESPACE: ${{ secrets.COREWEAVE_NAMESPACE }}
